.. _architecture:

##########################
系统架构设计 (v5.4 - MySQL迁移与功能重构)
##########################

Qzen (千针) 应用采用经典的三层架构模型，以确保代码的模块化、可维护性和可扩展性。该架构分为表示层 (UI)、业务逻辑层 (Core) 和数据访问层 (Data)。

.. image:: /images/architecture_diagram.png
   :alt: Qzen 三层架构图
   :align: center
   :width: 600px

   *图 1: Qzen 应用三层架构*

技术栈
================

*   **UI**: PyQt6 - 用于构建现代、响应式的桌面用户界面。
*   **数据库**: MySQL - 作为主要的持久化存储，通过 SQLAlchemy ORM 进行交互。
*   **数据分析**: Scikit-learn - 用于实现文本聚类和相似度计算等核心分析功能。
*   **并发模型**: QThread - 所有耗时操作（如文件扫描、数据分析）都在后台工作线程中执行，以保证 UI 的流畅性。

各层职责
================

1.  **表示层 (qzen_ui)**
    *   **职责**: 提供用户交互界面，展示数据，并捕获用户输入。
    *   **组件**:
        *   `main_window.py`: 应用主窗口，整合了所有功能标签页。
        *   `tabs/`: 包含各个功能模块的 UI 界面，如 `setup_tab.py`, `analysis_cluster_tab.py` 等。
        *   `worker.py`: 定义了 `QThread` 工作线程，用于执行后台任务。

2.  **业务逻辑层 (qzen_core)**
    *   **职责**: 实现应用的核心业务逻辑，协调其他层完成用户请求。
    *   **组件**:
        *   `orchestrator.py`: 核心协调器，负责调度各项服务，如文件提取、分析和入库。
        *   `ingestion_service.py`: 负责从文件系统中扫描和提取数据。
        *   `analysis_service.py`: 提供文本去重、相似度计算等分析服务。
        *   `cluster_engine.py`: 实现 K-Means 聚类算法。
        *   `similarity_engine.py`: 计算文件间的相似度。

3.  **数据访问层 (qzen_data)**
    *   **职责**: 负责所有与数据存储相关的操作，包括数据库交互和文件系统访问。
    *   **组件**:
        *   `database_handler.py`: 封装了所有与 MySQL 数据库的交互逻辑，使用 SQLAlchemy Core API 和 ORM。
        *   `models.py`: 定义了所有数据库表的 ORM 模型，如 `Document`, `TaskRun` 等。
        *   `file_handler.py`: 提供文件系统操作的实用函数，如文件扫描和哈希计算。

关键设计决策
====================

1.  **文档驱动的 AI 协作 (DDAC)**: 所有开发活动严格遵循 `mcp.json` 中定义的 DDAC 工作流，即“先更新文档，后实现编码”。
2.  **后台任务处理**: 为了防止 UI 线程阻塞，所有长时间运行的任务（如文件扫描、聚类分析）都必须在单独的 `QThread` 中异步执行。
3.  **配置外部化**: 应用配置（如数据库连接信息）存储在 `config.json` 文件中，实现了配置与代码的分离。
4.  **模块化设计**: 代码被组织在 `qzen_core`, `qzen_data`, 和 `qzen_ui` 等独立的包中，以实现高内聚、低耦合。
5.  **数据库迁移至 MySQL**: 出于性能和稳定性的考虑，项目后端数据库已从早期版本迁移至 MySQL。
6.  **数据库写操作约束 (DB_WRITE_CONSTRAINT)**: 由于 `sqlalchemy-dm` 驱动的 `do_executemany` 方法存在 Bug，所有数据库的 **更新 (UPDATE)** 操作必须在循环中逐条执行并提交。批量 **插入 (INSERT)** 操作 (`session.add_all()`) 经过验证是安全的，并被用于提升性能。
7.  **原子性文件操作**: 任何改变文件物理路径的操作（如移动、重命名）都必须与数据库更新在一个原子事务中完成，以保证文件系统与数据库状态的绝对一致性。

附录：数据库初始化与操作最佳实践
==================================================

数据库的初始化和迁移由 `database_handler.py` 中的逻辑自动处理。开发过程中，应始终通过 `DatabaseHandler` 与数据库交互，而不是直接执行 SQL 语句，以确保所有操作都符合设计规范和约束。
